@page "/categorias"
@using Microsoft.AspNetCore.Authorization
@using PropiedadesBlazorServer2.Modelos.DTO
@using Repositorio.IRepositorio
@inject ICategoriaRepositorio CategoriaRepositorio
@rendermode InteractiveServer
@inject IJSRuntime JsRuntime

@attribute [Authorize]

<PageTitle>Categorias</PageTitle>
<h1 class="text-center">Categorias</h1>

<div class="card">
    <div class="card-header">
        <div class="row">
            <div class="col-7">
                <h4 class="card-title text-dark">Lista de Categorias</h4>
            </div>
            <div class="col-3 offset-2">
                <NavLink href="crear-categoria" class="btn btn-primary"><i class="bi bi-plus-circle-fill"></i>&nbsp; Crear categoria</NavLink>
            </div>
        </div>
    </div>
    <div class="card-body">
        <table class="table table-bordered table-hover">
            <thead>
                <tr>
                    <th>Id</th>
                    <th>Nombre</th>
                    <th>Descripcion</th>
                    <th>Acciones</th>
                </tr>
            </thead>
                <tbody>
                    @* Validamos si hay mas de un registro *@
                    @if (categoriaDTO.Count() > 0)
                    {
                        foreach (var categoria in categoriaDTO)
                        {
                            <tr>
                                <td>@categoria.Id</td>
                                <td>@categoria.NombreCategoria</td>
                                <td>@categoria.Descripcion</td>
                                <td>
                                <NavLink href="@($"editar-categoria/{categoria.Id}")" class="btn btn-success"><i class="bi bi-gear-fill"></i>&nbsp; Editar</NavLink>
                                <button class="btn btn-danger" @onclick="() => ManejadorOnBorrar(categoria.Id)"><i class="bi bi-trash-fill"></i>&nbsp; Borrar</button>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="5">No hay Registros.</td>
                        </tr>
                    }
                </tbody>
        </table>
    </div>
</div>



@code {
    private IEnumerable<CategoriaDTO> categoriaDTO { get; set; } = new List<CategoriaDTO>();
    private int? BorrarIdCategoria { get; set; } = null;

    protected override async Task OnInitializedAsync()
    {
        categoriaDTO = await CategoriaRepositorio.GetAllCategoria();
    }

    private async Task ManejadorOnBorrar(int categoriaId)
    {
        BorrarIdCategoria = categoriaId;
        //Version 1
        bool result = await JsRuntime.InvokeAsync<bool>("confirmDelete");

        //Version 2
        //var result = await JsRuntime.InvokeAsync<string>("showSaveChangesSwal");

        if (result && BorrarIdCategoria != null)
        {
            await CategoriaRepositorio.BorrarCategoria(BorrarIdCategoria.Value);
            categoriaDTO = await CategoriaRepositorio.GetAllCategoria();
        }
    }
}
