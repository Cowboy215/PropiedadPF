@page "/crear-propiedad"
@using Microsoft.AspNetCore.Authorization
@using PropiedadesBlazorServer2.Modelos.DTO
@using PropiedadesBlazorServer2.Servicios
@using Repositorio.IRepositorio
@inject IPropiedadRepositorio PropiedadRepositorio
@inject ICategoriaRepositorio CategoriaRepositorio
@inject IIMagenPropiedadRepositorio IMagenPropiedadRepositorio
@inject ISubidaArchivo SubidaArchivo
@inject NavigationManager navigationManager
@rendermode InteractiveServer
@inject IJSRuntime JsRuntime

@attribute [Authorize]

<PageTitle>Crear Propiedad</PageTitle>
<h1 class="text-center">Crear Propiedad</h1>

<div class="card">
    <div class="card-header">
        <div class="row">
            <div class="col-7">
                <h2 class="text-dark">Nueva Propiedad</h2>
            </div>
        </div>
    </div>
    <div class="card-body">
        @* Cuidado con el OnInvalidSubmit es OnValidSubmit *@
        <EditForm Model="propiedadDTO" OnValidSubmit="@(() => ManejadorOnCrearPropiedad())">
            <DataAnnotationsValidator></DataAnnotationsValidator>
            <ValidationSummary></ValidationSummary>
            <div class="container">

                <div class="form-group">
                    <div class="row">
                        <div class="col-2">
                            <label>Nombre: </label>
                        </div>

                        <div class="col-6">
                            <InputText @bind-Value="propiedadDTO.Nombre" class="form-control" placeholder="Ingresa el Nombre"></InputText>
                            <ValidationMessage For="() => propiedadDTO.Nombre"></ValidationMessage>
                        </div>
                    </div>
                </div>
                <br />

                <div class="form-group">
                    <div class="row">
                        <div class="col-2">
                            <label>Descripcion: </label>
                        </div>

                        <div class="col-6">
                            <InputText @bind-Value="propiedadDTO.Descripcion" class="form-control" placeholder="Ingresa la descripcion"></InputText>
                            <ValidationMessage For="() => propiedadDTO.Descripcion"></ValidationMessage>
                        </div>
                    </div>
                </div>
                <br />

                <div class="form-group">
                    <div class="row">
                        <div class="col-2">
                            <label>Area: </label>
                        </div>

                        <div class="col-6">
                            <InputNumber @bind-Value="propiedadDTO.Area" class="form-control" placeholder="Ingresa el Area"></InputNumber>
                            <ValidationMessage For="() => propiedadDTO.Area"></ValidationMessage>
                        </div>
                    </div>
                </div>
                <br />

                <div class="form-group">
                    <div class="row">
                        <div class="col-2">
                            <label>Habitaciones: </label>
                        </div>

                        <div class="col-6">
                            <InputNumber @bind-Value="propiedadDTO.Habitaciones" class="form-control" placeholder="Ingresa las Habitaciones"></InputNumber>
                            <ValidationMessage For="() => propiedadDTO.Habitaciones"></ValidationMessage>
                        </div>
                    </div>
                </div>
                <br />

                <div class="form-group">
                    <div class="row">
                        <div class="col-2">
                            <label>Baños: </label>
                        </div>

                        <div class="col-6">
                            <InputNumber @bind-Value="propiedadDTO.Banios" class="form-control" placeholder="Ingresa los baños"></InputNumber>
                            <ValidationMessage For="() => propiedadDTO.Banios"></ValidationMessage>
                        </div>
                    </div>
                </div>
                <br />

                <div class="form-group">
                    <div class="row">
                        <div class="col-2">
                            <label>Estacionamiento: </label>
                        </div>

                        <div class="col-6">
                            <InputNumber @bind-Value="propiedadDTO.Parqueadero" class="form-control" placeholder="Ingresa el estacionamiento"></InputNumber>
                            <ValidationMessage For="() => propiedadDTO.Parqueadero"></ValidationMessage>
                        </div>
                    </div>
                </div>
                <br />

                <div class="form-group">
                    <div class="row">
                        <div class="col-2">
                            <label>Precio: </label>
                        </div>

                        <div class="col-6">
                            <InputNumber @bind-Value="propiedadDTO.Precio" class="form-control" placeholder="Ingresa el Precio"></InputNumber>
                            <ValidationMessage For="() => propiedadDTO.Precio"></ValidationMessage>
                        </div>
                    </div>
                </div>
                <br />

                <div class="form-group">
                    <div class="row">
                        <div class="col-2">
                            <label>Activo: </label>
                        </div>

                        <div class="col-6">
                            <InputCheckbox @bind-Value="propiedadDTO.Activo"></InputCheckbox>
                            <ValidationMessage For="() => propiedadDTO.Activo"></ValidationMessage>
                        </div>
                    </div>
                </div>
                <br />

                @* Creacion del DropDown *@

                <div class="form-group">
                    <div class="row">
                        <div class="col-2">
                            <label>Categoria: </label>
                        </div>

                        <div class="col-6">
                            <InputSelect @bind-Value="categoriaSeleccionada.Id" class="form-control">
                               @*  <option  value="">--Selecciona una categoria--</option> *@
                                @foreach (var categoria in DropDownCategoriaDTO)
                                {
                                    <option value="@categoria.Id">@categoria.NombreCategoria</option>
                                }
                            </InputSelect>
                        </div>
                    </div>
                </div>
                <br />

                @* Subir  archivos *@

                <div class="form-group" style="padding-top:30px; padding-bottom: 30px">
                    <hr />
                    <h4>Imagenes Propiedad</h4>

                    <InputFile OnChange="ManejadorOnSubidaArchivo" multiple></InputFile>

                    <div class="row">
                        @if (estaIniciadoProcesoSubidaImagen)
                        {
                            <div class="col-md-12">
                                <span><i class="bi bi-arrow-repeat"></i> Por favor espere mientras Suben las Imagenes</span>
                            </div>
                        }

                        @if (propiedadDTO.UrlImagenes != null && propiedadDTO.UrlImagenes.Count > 0)
                        {
                            int serial = 1;
                            foreach (var imagenPropiedad in propiedadDTO.UrlImagenes)
                            {
                                <div class="col-md-2 mt-3">
                                    <div class="imagen-propiedad" style="background: url('@imagenPropiedad') 50% 50%">
                                        <span class="titulo-imagen-propiedad">@serial</span>
                                    </div>

                                    <button class="btn btn-outline-danger btn-block mt-4" type="button" @onclick="() => BorrarImagen(imagenPropiedad)">
                                        Borrar
                                    </button>

                                </div>
                                serial++;
                            }
                        }
                    </div>
                </div>



                <div class="form-group">
                    <div class="row">
                        <div class="col-2">
                            <button type="submit" class="btn btn-success"><i class="bi bi-floppy2-fill"></i>&nbsp; Guardar Cambios</button>
                        </div>

                        <div class="col-6">
                            <NavLink href="propiedades" class="btn btn-secondary"><i class="bi bi-arrow-left-square-fill"></i>&nbsp; Volver Atras</NavLink>
                        </div>
                    </div>
                </div>
                <br />

            </div>
        </EditForm>
    </div>
</div>




@code {

    private PropiedadDTO propiedadDTO { get; set; } = new PropiedadDTO();
    private DropDownCategoriaDTO categoriaSeleccionada = new DropDownCategoriaDTO();
    private bool estaIniciadoProcesoSubidaImagen { get; set; } = false;
    private ImagenPropiedadDTO imagenDTO { get; set; } = new ImagenPropiedadDTO();

    //Obtenemos la lista de categorias
    private IEnumerable<DropDownCategoriaDTO> DropDownCategoriaDTO { get; set; } = new List<DropDownCategoriaDTO>();

    protected async override Task OnInitializedAsync()
    {
        DropDownCategoriaDTO = await CategoriaRepositorio.GetDropDownCategoria();
    }

    private async Task ManejadorOnCrearPropiedad()
    {
        var nombrePropiedad = await PropiedadRepositorio.NombrePropiedadExiste(propiedadDTO.Nombre);
        if (nombrePropiedad != null)
        {
            //Existe esa propiedad
            await JsRuntime.ToastrError("El nombre de la propiedad ya existe");
            return;
        }

        //Aqui quiere decir que no existe y se crea en la base de datos.
        propiedadDTO.CategoriaId = categoriaSeleccionada.Id;
        var crearPropiedad = await PropiedadRepositorio.CrearPropiedad(propiedadDTO);
        await AgregarImagenesPropiedad(crearPropiedad);
        await JsRuntime.ToastrSuccess("Propieda Creada Exitosamente");
        await Task.Delay(2000);
        navigationManager.NavigateTo("/propiedades");

    }

    private async Task ManejadorOnSubidaArchivo(InputFileChangeEventArgs e)
    {
        estaIniciadoProcesoSubidaImagen = true;
        try
        {
            var imagenes = new List<string>();
            if (e.GetMultipleFiles().Count() > 0)
            {
                foreach (var file in e.GetMultipleFiles())
                {
                    System.IO.FileInfo fileInfo = new System.IO.FileInfo(file.Name);
                    if (fileInfo.Extension.ToLower()  == ".jpg"
                        || fileInfo.Extension.ToLower() == ".png"
                        || fileInfo.Extension.ToLower() == ".jpeg")
                    {
                        var uploadedImagenPatch = await SubidaArchivo.SubirArchivo(file);
                        imagenes.Add(uploadedImagenPatch);
                    }else
                    {
                        await JsRuntime.ToastrError("Solo archivos .jpg .png o .jpeg");
                        return;
                    }
                }

                if (imagenes.Any())
                {
                    if (propiedadDTO.UrlImagenes != null && propiedadDTO.UrlImagenes.Any())
                    {
                        propiedadDTO.UrlImagenes.AddRange(imagenes);
                    }
                    else
                    {
                        propiedadDTO.UrlImagenes = new List<string>();
                        propiedadDTO.UrlImagenes.AddRange(imagenes);
                    }
                }else
                {
                    await JsRuntime.ToastrError("Error al subir imagenes");
                    return;
                }
            }

            estaIniciadoProcesoSubidaImagen = false;
        }
        catch (Exception)
        {

            throw;
        }
    }

    internal async Task BorrarImagen(string urlImagen)
    {
        try
        {
            var imagenIndex = propiedadDTO.UrlImagenes.FindIndex(x => x == urlImagen);
            var nombreImagen = urlImagen.Replace($"{navigationManager.BaseUri}ImagenesPropiedades/", "");
            if (propiedadDTO.Id == 0)
            {
                var result = SubidaArchivo.BorrarArchivo(nombreImagen);
            }
            propiedadDTO.UrlImagenes.RemoveAt(imagenIndex);
        }
        catch (Exception ex)
        {

            await JsRuntime.ToastrError(ex.Message);
            return;
        }
    }

    private async Task AgregarImagenesPropiedad(PropiedadDTO propDTO)
    {
        foreach (var urlImagen in propiedadDTO.UrlImagenes)
        {
            if (propiedadDTO.ImagenPropiedad == null || propiedadDTO.ImagenPropiedad.Where(x => x.UrlImagenPropiedad == urlImagen).Count() == 0)
            {
                imagenDTO = new ImagenPropiedadDTO()
                {
                        PropiedadId = propDTO.Id,
                        UrlImagenPropiedad = urlImagen
                };
                await IMagenPropiedadRepositorio.CrearPropiedadImagen(imagenDTO);
            }
        }
    }


}
